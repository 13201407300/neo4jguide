勘误表
[1] 原文：249页，4.2.2.2将操作写进事务中
程序4-7事务try、catch块
 Try(Transaction tx = graphDb.beginTx())
 {
     // 本章所有操作放入到这个try、catch块中
     tx.success();
 }catch(Exception e){
	Tx.failure()
}
 finally
 {
     tx.finish();
 }
 

更正为：
Transaction tx = graphDb.beginTx();
 try
 {
     //本章所有操作放入到这个try、catch块中
     // ...
     tx.success();
 }
 finally
 {
     tx.close();
 }
 
解释：原文中将Transaction tx = graphDb.beginTx()声明放入try后，导致作用域仅限于try程序块中,catch、finially程序块无法引用到tx对象，这导致错误；另外在Neo4j3.1版本后Transaction类取消了finish方法并用close方法来关闭事务。
另外附上，Transaction各个方法使用解释:
close() 提交事务，提交是否成功则取决于事务有没有调用success方法（标记为成功）、failure方法（标记为失败并回滚）。
failure() 将事务标记为失败，这样当程序运行到Transaction的close方法时将会无条件回滚事务。
success() 将事务标记为成功，这样当程序运行到Transaction的close方法时将会提交事务。
terminate()将事务标记为终止，与failure方法类似当程序运行到Transaction的close方法时将会无条件回滚事务。当此方法被执行后，即便后续再执行success方法，当前事务依然会被回滚。
参考文档：https://neo4j.com/docs/java-reference/current/javadocs/org/neo4j/graphdb/Transaction.html
